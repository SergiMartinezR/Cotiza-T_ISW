{"ast":null,"code":"var _jsxFileName = \"/home/sergi/Documents/Repos/My_Repos/Cotiza-T_ISW/frontend/src/routes/Home/Posts/Post/Comment.js\";\nimport React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport defaultPic from \"../../../../assets/defaultProfilePic.png\";\nimport Reply from \"./Reply.js\";\nimport axios from \"../../../../API/baseURL/baseURL\";\n\nclass Comment extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLiked: this.props.comment.comment.is_liked_by_user,\n      likeNum: this.props.comment.comment.likes_count,\n      openReply: false,\n      openReplyBar: false,\n      openReplies: false,\n      replies: this.props.comment.replies,\n      newReply: \"\"\n    };\n\n    this.likeComment = () => {\n      // let likesNumber = this.state.likeNum + 1;\n      this.setState({// isLiked: true,\n        // likeNum: likesNumber\n      });\n      let token = localStorage.getItem(\"accessToken\");\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      let likeData = {\n        vote: 1\n      };\n      axios.post(`/user/post/comment/like/${this.props.commentId}/`, likeData, config).then(res => {\n        console.log(res);\n        this.setState({\n          isLiked: true\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n      this.props.comment.comment.is_liked = true;\n      this.props.comment.comment.likes_count = this.props.comment.comment.likes_count + 1; // alert(\"Liked comment!\");\n    };\n\n    this.unlikeComment = () => {\n      // let likesNumber = this.state.likeNum - 1;\n      this.setState({// isLiked: false,\n        // likeNum: likesNumber\n      });\n      let token = localStorage.getItem(\"accessToken\");\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      let likeData = {\n        vote: -1\n      };\n      axios.post(`/user/post/comment/like/${this.props.commentId}/`, likeData, config).then(res => {\n        this.setState({\n          isLiked: false\n        });\n        console.log(res);\n      }).catch(err => {\n        console.log(err);\n      });\n      this.props.comment.comment.is_liked = false;\n      this.props.comment.comment.likes_count = this.props.comment.comment.likes_count - 1; // alert(\"Unliked comment!\");\n    };\n\n    this.openReplyBox = () => {\n      this.setState({\n        openReplyBar: true\n      });\n    };\n\n    this.openReplies = () => {\n      this.setState({\n        openReplies: true\n      });\n    };\n\n    this.addReply = e => {\n      e.preventDefault();\n      let profID = localStorage.getItem(\"profileID\");\n      let commentId = this.props.commentId;\n      let text = this.state.newReply;\n      let replyData = {\n        replied_by: profID,\n        comment: this.props.commentId,\n        text: text\n      };\n      let token = localStorage.getItem(\"accessToken\");\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      let replyId = null;\n      console.log(replyData);\n      axios.post(`/user/post/comment/reply/create/`, replyData, config).then(res => {\n        console.log(res);\n        replyId = res.data.id;\n      }).catch(err => {\n        console.log(err);\n      });\n      let newReplies = [{\n        author_id: this.props.viewerId,\n        author_avatar: this.props.img,\n        author_name: this.props.name,\n        author_tagline: this.props.tagline,\n        text: this.state.newReply,\n        is_liked: false,\n        posted_at: 'ahora',\n        id: replyId,\n        likes_count: 0,\n        liked_by: [],\n        posted_at: \"ahora\"\n      }];\n\n      for (let index in this.state.replies) {\n        newReplies.push(this.state.replies[index]);\n      }\n\n      this.setState({\n        replies: newReplies,\n        newReply: \"\"\n      }); // this.props.comment.comment.numReplies = this.props.comment.comment.numReplies + 1;\n\n      this.props.comment.replies.length = this.props.comment.replies.length + 1;\n    };\n  }\n\n  render() {\n    let comment = this.props.comment;\n    let userImgSrc = this.props.img;\n    let commentUserImgSrc = comment.comment.author_avatar;\n\n    if (commentUserImgSrc === null) {\n      commentUserImgSrc = defaultPic;\n    }\n\n    let likeButton = /*#__PURE__*/React.createElement(\"span\", {\n      onClick: this.unlikeComment,\n      style: {\n        backgroundColor: \"#edf0f5\",\n        borderRadius: \"3px\",\n        color: \"#0a66c2\"\n      },\n      className: \"like\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }\n    }, \"Like\"); // if (!this.state.isLiked) {\n\n    if (!this.state.isLiked) {\n      likeButton = /*#__PURE__*/React.createElement(\"span\", {\n        onClick: this.likeComment,\n        className: \"like\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }, \"Like\");\n    }\n\n    let replyInputData = null;\n\n    if (this.state.openReplyBar) {\n      replyInputData = /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.addReply,\n        className: \"commentInputBar commentReply\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: userImgSrc,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        value: this.state.newReply,\n        type: \"text\",\n        placeholder: \"Add a reply...\",\n        onChange: e => this.setState({\n          newReply: e.target.value\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    let repliesData = null;\n\n    if (this.state.openReplies) {\n      // repliesData = comment.replies.map((reply, index) => {\n      repliesData = this.state.replies.map((reply, index) => {\n        // let replyUserImgSrc = reply.userImg;\n        // if (replyUserImgSrc === null) {\n        //   replyUserImgSrc = defaultPic;\n        // }\n        return /*#__PURE__*/React.createElement(Reply, {\n          replyId: reply.id,\n          reply: reply,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 11\n          }\n        }) // <div className=\"comment reply\">\n        //   <img src={replyUserImgSrc} />\n        //   <div className=\"commentBlock\">\n        //     <div className=\"commentData\">\n        //       <NavLink to={`/user/${comment.comment.userId}`}>\n        //         <h6 className=\"name\">{comment.comment.name}</h6>\n        //         <h6 className=\"tag\">{comment.comment.tag}</h6>\n        //       </NavLink>\n        //       <h6 className=\"actualComment\">{comment.comment.comment}</h6>\n        //     </div>\n        //     <div>\n        //       {likeButton}\n        //       <i\n        //         style={{ color: \"#0a66c2\" }}\n        //         class=\"likeComment fas fa-thumbs-up\"\n        //       ></i>\n        //       <span className=\"commentLikeNum\">\n        //         {comment.comment.numLikes}\n        //       </span>\n        //       <span style={{ fontWeight: \"300\" }}>|</span>\n        //       <span onClick={this.openReplyBox} className=\"like\">\n        //         Reply\n        //       </span>\n        //       <span\n        //         className=\"commentLikeNum\"\n        //         onClick={this.openReplies}\n        //         style={{ cursor: \"pointer\" }}\n        //       >\n        //         {comment.comment.numLikes} comments\n        //       </span>\n        //     </div>\n        //   </div>\n        // </div>\n        ;\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: commentUserImgSrc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"commentBlock\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"commentData\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"timeStamp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, comment.comment.posted_at), /*#__PURE__*/React.createElement(NavLink, {\n      to: `/user/${comment.comment.author_id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 15\n      }\n    }, comment.comment.author_name), /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"tag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 15\n      }\n    }, comment.comment.author_tagline)), /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"actualComment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }\n    }, comment.comment.text)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, likeButton, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        color: \"#0a66c2\"\n      },\n      class: \"likeComment fas fa-thumbs-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"commentLikeNum\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    }, comment.comment.likes_count), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontWeight: \"300\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    }, \"|\"), /*#__PURE__*/React.createElement(\"span\", {\n      onClick: this.openReplyBox,\n      className: \"like\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }\n    }, \"Reply\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"commentLikeNum\",\n      onClick: this.openReplies,\n      style: {\n        cursor: \"pointer\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }, this.props.comment.replies.length, \" replies\")), repliesData, replyInputData));\n  }\n\n}\n\nexport default Comment;","map":{"version":3,"sources":["/home/sergi/Documents/Repos/My_Repos/Cotiza-T_ISW/frontend/src/routes/Home/Posts/Post/Comment.js"],"names":["React","Component","NavLink","defaultPic","Reply","axios","Comment","state","isLiked","props","comment","is_liked_by_user","likeNum","likes_count","openReply","openReplyBar","openReplies","replies","newReply","likeComment","setState","token","localStorage","getItem","config","headers","Authorization","likeData","vote","post","commentId","then","res","console","log","catch","err","is_liked","unlikeComment","openReplyBox","addReply","e","preventDefault","profID","text","replyData","replied_by","replyId","data","id","newReplies","author_id","viewerId","author_avatar","img","author_name","name","author_tagline","tagline","posted_at","liked_by","index","push","length","render","userImgSrc","commentUserImgSrc","likeButton","backgroundColor","borderRadius","color","replyInputData","target","value","repliesData","map","reply","fontWeight","cursor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport defaultPic from \"../../../../assets/defaultProfilePic.png\";\r\nimport Reply from \"./Reply.js\";\r\nimport axios from \"../../../../API/baseURL/baseURL\";\r\n\r\nclass Comment extends Component {\r\n  state = {\r\n    isLiked: this.props.comment.comment.is_liked_by_user,\r\n    likeNum: this.props.comment.comment.likes_count,\r\n    openReply: false,\r\n    openReplyBar: false,\r\n    openReplies: false,\r\n    replies: this.props.comment.replies,\r\n    newReply: \"\",\r\n  };\r\n\r\n  likeComment = () => {\r\n    // let likesNumber = this.state.likeNum + 1;\r\n    this.setState({\r\n      // isLiked: true,\r\n      // likeNum: likesNumber\r\n    });\r\n\r\n    let token = localStorage.getItem(\"accessToken\");\r\n    const config = {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    };\r\n    let likeData = {\r\n      vote: 1,\r\n    };\r\n    axios\r\n      .post(`/user/post/comment/like/${this.props.commentId}/`, likeData, config)\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.setState({isLiked : true});\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    this.props.comment.comment.is_liked = true;\r\n    this.props.comment.comment.likes_count =\r\n      this.props.comment.comment.likes_count + 1;\r\n    // alert(\"Liked comment!\");\r\n  };\r\n\r\n  unlikeComment = () => {\r\n    // let likesNumber = this.state.likeNum - 1;\r\n    this.setState({\r\n      // isLiked: false,\r\n      // likeNum: likesNumber\r\n    });\r\n\r\n    let token = localStorage.getItem(\"accessToken\");\r\n    const config = {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    };\r\n    let likeData = {\r\n      vote: -1,\r\n    };\r\n    axios\r\n      .post(`/user/post/comment/like/${this.props.commentId}/`, likeData, config)\r\n      .then((res) => {\r\n        this.setState({isLiked : false});\r\n        console.log(res);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    this.props.comment.comment.is_liked = false;\r\n    this.props.comment.comment.likes_count =\r\n      this.props.comment.comment.likes_count - 1;\r\n    // alert(\"Unliked comment!\");\r\n  };\r\n\r\n  openReplyBox = () => {\r\n    this.setState({ openReplyBar: true });\r\n  };\r\n  openReplies = () => {\r\n    this.setState({ openReplies: true });\r\n  };\r\n\r\n  addReply = (e) => {\r\n    e.preventDefault();\r\n    let profID = localStorage.getItem(\"profileID\");\r\n\r\n    let commentId = this.props.commentId;\r\n    let text = this.state.newReply;\r\n    let replyData = {\r\n      replied_by: profID,\r\n      comment: this.props.commentId,\r\n      text: text,\r\n    };\r\n    let token = localStorage.getItem(\"accessToken\");\r\n    const config = {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    };\r\n    let replyId = null;\r\n    console.log(replyData);\r\n    axios\r\n      .post(`/user/post/comment/reply/create/`, replyData, config)\r\n      .then((res) => {\r\n        console.log(res);\r\n        replyId = res.data.id;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    let newReplies = [\r\n      {\r\n        author_id: this.props.viewerId,\r\n        author_avatar: this.props.img,\r\n        author_name: this.props.name,\r\n        author_tagline: this.props.tagline,\r\n        text: this.state.newReply,\r\n        is_liked: false,\r\n        posted_at: 'ahora',\r\n        id: replyId,\r\n        likes_count: 0,\r\n        liked_by: [],\r\n        posted_at: \"ahora\",\r\n      },\r\n    ];\r\n    for (let index in this.state.replies) {\r\n      newReplies.push(this.state.replies[index]);\r\n    }\r\n    this.setState({\r\n      replies: newReplies,\r\n      newReply: \"\",\r\n    });\r\n    // this.props.comment.comment.numReplies = this.props.comment.comment.numReplies + 1;\r\n    this.props.comment.replies.length = this.props.comment.replies.length + 1;\r\n  };\r\n\r\n  render() {\r\n    let comment = this.props.comment;\r\n    let userImgSrc = this.props.img;\r\n\r\n    let commentUserImgSrc = comment.comment.author_avatar;\r\n    if (commentUserImgSrc === null) {\r\n      commentUserImgSrc = defaultPic;\r\n    }\r\n\r\n    let likeButton = (\r\n      <span\r\n        onClick={this.unlikeComment}\r\n        style={{\r\n          backgroundColor: \"#edf0f5\",\r\n          borderRadius: \"3px\",\r\n          color: \"#0a66c2\",\r\n        }}\r\n        className=\"like\"\r\n      >\r\n        Like\r\n      </span>\r\n    );\r\n    // if (!this.state.isLiked) {\r\n    if (!this.state.isLiked) {\r\n      likeButton = (\r\n        <span onClick={this.likeComment} className=\"like\">\r\n          Like\r\n        </span>\r\n      );\r\n    }\r\n\r\n    let replyInputData = null;\r\n    if (this.state.openReplyBar) {\r\n      replyInputData = (\r\n        <form onSubmit={this.addReply} className=\"commentInputBar commentReply\">\r\n          <img src={userImgSrc} />\r\n          <input\r\n            value={this.state.newReply}\r\n            type=\"text\"\r\n            placeholder=\"Add a reply...\"\r\n            onChange={(e) => this.setState({ newReply: e.target.value })}\r\n          />\r\n        </form>\r\n      );\r\n    }\r\n\r\n    let repliesData = null;\r\n    if (this.state.openReplies) {\r\n      // repliesData = comment.replies.map((reply, index) => {\r\n      repliesData = this.state.replies.map((reply, index) => {\r\n        // let replyUserImgSrc = reply.userImg;\r\n        // if (replyUserImgSrc === null) {\r\n        //   replyUserImgSrc = defaultPic;\r\n        // }\r\n        return (\r\n          <Reply replyId={reply.id} reply={reply} />\r\n          // <div className=\"comment reply\">\r\n          //   <img src={replyUserImgSrc} />\r\n          //   <div className=\"commentBlock\">\r\n          //     <div className=\"commentData\">\r\n          //       <NavLink to={`/user/${comment.comment.userId}`}>\r\n          //         <h6 className=\"name\">{comment.comment.name}</h6>\r\n          //         <h6 className=\"tag\">{comment.comment.tag}</h6>\r\n          //       </NavLink>\r\n\r\n          //       <h6 className=\"actualComment\">{comment.comment.comment}</h6>\r\n          //     </div>\r\n\r\n          //     <div>\r\n          //       {likeButton}\r\n          //       <i\r\n          //         style={{ color: \"#0a66c2\" }}\r\n          //         class=\"likeComment fas fa-thumbs-up\"\r\n          //       ></i>\r\n          //       <span className=\"commentLikeNum\">\r\n          //         {comment.comment.numLikes}\r\n          //       </span>\r\n          //       <span style={{ fontWeight: \"300\" }}>|</span>\r\n          //       <span onClick={this.openReplyBox} className=\"like\">\r\n          //         Reply\r\n          //       </span>\r\n          //       <span\r\n          //         className=\"commentLikeNum\"\r\n          //         onClick={this.openReplies}\r\n          //         style={{ cursor: \"pointer\" }}\r\n          //       >\r\n          //         {comment.comment.numLikes} comments\r\n          //       </span>\r\n          //     </div>\r\n          //   </div>\r\n          // </div>\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div className=\"comment\">\r\n        <img src={commentUserImgSrc} />\r\n\r\n        <div className=\"commentBlock\">\r\n          <div className=\"commentData\">\r\n            <span className='timeStamp'>{comment.comment.posted_at}</span>\r\n            <NavLink to={`/user/${comment.comment.author_id}`}>\r\n              <h6 className=\"name\">{comment.comment.author_name}</h6>\r\n              <h6 className=\"tag\">{comment.comment.author_tagline}</h6>\r\n            </NavLink>\r\n\r\n            <h6 className=\"actualComment\">{comment.comment.text}</h6>\r\n          </div>\r\n\r\n          <div>\r\n            {likeButton}\r\n            <i\r\n              style={{ color: \"#0a66c2\" }}\r\n              class=\"likeComment fas fa-thumbs-up\"\r\n            ></i>\r\n            {/* <span className=\"commentLikeNum\">{this.state.likeNum}</span> */}\r\n            <span className=\"commentLikeNum\">\r\n              {comment.comment.likes_count}\r\n            </span>\r\n            <span style={{ fontWeight: \"300\" }}>|</span>\r\n            <span onClick={this.openReplyBox} className=\"like\">\r\n              Reply\r\n            </span>\r\n            <span\r\n              className=\"commentLikeNum\"\r\n              onClick={this.openReplies}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              {/* {comment.comment.numReplies} replies */}\r\n              {this.props.comment.replies.length} replies\r\n            </span>\r\n          </div>\r\n\r\n          {repliesData}\r\n          {replyInputData}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comment;\r\n"]},"metadata":{},"sourceType":"module"}